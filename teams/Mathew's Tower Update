package team105;

import battlecode.common.*;

import java.util.Random;

public class RobotPlayer{

	public static RobotController rc;	//We know what this is

	static Direction allDirections[] = Direction.values();	//randomly selects direction

	static MapLocation pastrs[];	
	static MapLocation target;		

	static Random rng = new Random();	//used for Random Number Generation (R-N-G)		

	static int d = 0;

	static boolean tower = false;		//Used for soldiers to turn into towers
	static boolean pastr = false;		//Used for soldiers to turn into pastrs
	static boolean init = true;
	static boolean deny = false;
	static int count = 0;
	static int spawnC = 1;

	//static RobotInfo anEnemyInfo;

	//static Robot anEnemy;

	public static void run(RobotController rc_in)
	{		
		rc = rc_in;
		rng.setSeed(rc.getRobot().getID());							//random AI based on Robot's unique ID	
		if (init == true){
			target = rc.getLocation();
			target = target.add(allDirections[d], 17);
			init = false;
		}

		while(true)
		{
			try{
				if(rc.getHealth() < 25.0 && rc.isActive())	{rc.selfDestruct();}	

				if(rc.getType()==RobotType.HQ){						//Existential HQ (Who am I?)				
					runHeadquarters();

				}else if(rc.getType()==RobotType.SOLDIER){			//Thick Headed Soldier (Where do I go?)				
					runSoldier();

				}else if(rc.getType() == RobotType.NOISETOWER){
					runNoiseTower();

				}
				rc.yield();
			}
			catch (Exception e){		
				e.printStackTrace();
			}
		}
	}



	private static void runNoiseTower() throws GameActionException
	{	
		if(tower == false){
			if (rc.getLocation().isAdjacentTo(target) || rc.senseTerrainTile(target) == TerrainTile.OFF_MAP){			
				if(d >= 7){
					d = 0;							
				}else{
					d++;
				}
				target = rc.getLocation();
				if(d%2 == 0)
					target = target.add(allDirections[d],17);
				if(d%2 != 0)
					target = target.add(allDirections[d], 12);
			}

			if(rc.isActive() && rc.canAttackSquare(target)){
				rc.attackSquare(target);
				target = target.subtract(allDirections[d]);
			}
	}





	private static void runSoldier() throws GameActionException 
	{
	//Checks the map size to change starting locations for parts and noise towers
		if(rc.getMapWidth() > 90 && rc.getMapWidth() > 40){
			//Classifies a soldier as a starting tower		
			if(Clock.getRoundNum() < 21)	{tower = true;}

			//Classifies a soldier as a starting pastr			
			else if(Clock.getRoundNum() < 73)	{pastr = true;}

			//Information conversion to shoot nearby enemies, if there are enemies we can shoot
			Robot[] enemyRobots = rc.senseNearbyGameObjects(Robot.class,rc.getType().attackRadiusMaxSquared,rc.getTeam().opponent());
			if(enemyRobots.length > 0){			
				Robot anEnemy = enemyRobots[0];
				RobotInfo anEnemyInfo;

				try {
					anEnemyInfo = rc.senseRobotInfo(anEnemy);

					if(anEnemyInfo.location.distanceSquaredTo(rc.getLocation()) < rc.getType().attackRadiusMaxSquared){					
						if(rc.isActive()){
							rc.attackSquare(anEnemyInfo.location);					
						}
					}
				} catch (GameActionException e) {
					e.printStackTrace();
				}
			}
			if((tower || pastr) && count < 70){
				//If we didn't shoot anything or find any nearby enemy pastrs, move in a random direction		
				Direction d = Direction.EAST;
				//Direction d = rc.getLocation().directionTo(rc.senseEnemyHQLocation());
				if(rc.isActive() && rc.canMove(d))		
					rc.move(d);
				count++;
			}

			//Used for starting spawn of NoiseTower and Pastr		
			if(tower && rc.isActive() && count >= 70){
				rc.construct(RobotType.NOISETOWER);
			}else if(pastr && rc.isActive() && count >= 70){
				rc.construct(RobotType.PASTR);
			}
		}
	}


	private static void runHeadquarters() throws GameActionException 
	{
		//HQ Shoots baddies and kills em' dead		
		Robot[] enemies = rc.senseNearbyGameObjects(Robot.class, rc.getType().attackRadiusMaxSquared, rc.getTeam().opponent());
		if(enemies.length > 0){
			Robot anEnemy = enemies[0];
			RobotInfo anEnemyInfo;
			try{
				anEnemyInfo = rc.senseRobotInfo(anEnemy);
				if(anEnemyInfo.location.distanceSquaredTo(rc.getLocation())<rc.getType().attackRadiusMaxSquared){
					if(rc.isActive())	{rc.attackSquare(anEnemyInfo.location);}				
				}
			}catch (Exception e)	{e.printStackTrace();}
		}
		Direction spawnDir = allDirections[spawnC];											//pick a random spawn direction
		if(rc.isActive() && rc.canMove(spawnDir) && rc.senseRobotCount() < GameConstants.MAX_ROBOTS)	//usual checks (can we spawn)		{
			rc.spawn(spawnDir);
		if(spawnC > 7){
			spawnC = 0;
		}else{
			spawnC++;
		}			
	}
}
